/**
 * CSS Custom Properties
 *
 * These properties can be overridden using the component's tag as selector.
 *
 * @prop --calcite-loader-font-size: when type is determinate, the font-size of the loader percentage
 * @prop --calcite-loader-size: the width and height of a non-inline loader
 * @prop --calcite-loader-size-inline: the width and height of an inline loader
 */

$stroke-width: 3;
$loader-scale: 54;
$loader-circumference: ($loader-scale - (2 * $stroke-width)) * 3.14159;

:host {
  @apply items-center relative justify-center hidden mx-auto opacity-100 py-16;
  min-height: var(--calcite-loader-size);
  font-size: var(--calcite-loader-font-size);
  stroke: var(--calcite-ui-brand);
  stroke-width: $stroke-width;
  fill: none;
  transform: scale(1, 1);
  animation: loader-color-shift 6s alternate-reverse infinite linear;
}

:host([scale="s"]) {
  --calcite-loader-font-size: theme("fontSize.-2");
  --calcite-loader-size: theme("spacing.8");
  --calcite-loader-size-inline: theme("spacing.3");
}

:host([scale="m"]) {
  --calcite-loader-font-size: theme("fontSize.0");
  --calcite-loader-size: theme("spacing.16");
  --calcite-loader-size-inline: theme("spacing.4");
}

:host([scale="l"]) {
  --calcite-loader-font-size: theme("fontSize.2");
  --calcite-loader-size: theme("spacing.24");
  --calcite-loader-size-inline: theme("spacing.5");
}

:host([no-padding]) {
  @apply py-0;
}

:host([active]) {
  @apply flex;
}

.loader__text {
  @apply block text-center;
  margin-top: calc(var(--calcite-loader-size) + theme("spacing.6"));
}

.loader__percentage {
  @apply block absolute text-color-1 text-center;
  font-size: var(--calcite-loader-font-size);
  width: var(--calcite-loader-size);
  top: theme("spacing.16");
  left: 50%;
  margin-left: calc(var(--calcite-loader-size) / 2 * -1);
  margin-top: calc(var(--calcite-loader-size) / 2);
  line-height: 0.25;
  transform: scale(1, 1);
}

.loader__svgs {
  @apply absolute overflow-visible opacity-100;
  width: var(--calcite-loader-size);
  height: var(--calcite-loader-size);
  top: theme("spacing.16");
  left: 50%;
  margin-left: calc(var(--calcite-loader-size) / 2 * -1);
  transform: scale(1, 1);
}

.loader__svg {
  @apply absolute overflow-visible top-0 left-0 origin-center;
  width: var(--calcite-loader-size);
  height: var(--calcite-loader-size);
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  // by default the animation is rotation for ie. and edge
  animation-name: loader-clockwise;
}

// in newer browsers use the stroke-dash-offset animation as it looks better
@supports (display: grid) {
  .loader__svg--1 {
    animation-name: loader-offset-1;
  }
  .loader__svg--2 {
    animation-name: loader-offset-2;
  }
  .loader__svg--3 {
    animation-name: loader-offset-3;
  }
}

:host([type="determinate"]) {
  @apply animate-none;
  stroke: var(--calcite-ui-border-3);
  .loader__svg--3 {
    @apply animate-none;
    stroke: var(--calcite-ui-brand);
    stroke-dasharray: $loader-circumference;
    transform: rotate(-90deg);
    transition: all 100ms linear;
  }
}

:host([inline]) {
  @apply relative m-0 py-0 animate-none stroke-current stroke-2;
  height: var(--calcite-loader-size-inline);
  min-height: var(--calcite-loader-size-inline);
  width: var(--calcite-loader-size-inline);
  margin-right: var(--calcite-loader-size-inline) / 2;
  vertical-align: -var(--calcite-loader-size-inline) / 5;
}

:host([inline][dir="rtl"]) {
  @apply mr-0;
  margin-left: var(--calcite-loader-size-inline) / 2;
}

:host([active][inline]) {
  @apply inline-block;
}

:host([inline]) .loader__svgs {
  @apply top-0 left-0 m-0;
  width: var(--calcite-loader-size-inline);
  height: var(--calcite-loader-size-inline);
}

:host([inline]) .loader__svg {
  width: var(--calcite-loader-size-inline);
  height: var(--calcite-loader-size-inline);
}

:host([complete]) {
  @apply opacity-0;
  transform: scale(0.75, 0.75);
  transform-origin: center;
  transition: opacity 200ms linear 1000ms, transform 200ms linear 1000ms;
}

:host([complete]) .loader__svgs {
  @apply opacity-0;
  transform: scale(0.75, 0.75);
  transform-origin: center;
  transition: opacity 180ms linear 800ms, transform 180ms linear 800ms;
}

:host([complete]) .loader__percentage {
  color: theme("colors.brand");
  transform: scale(1.05, 1.05);
  transform-origin: center;
  transition: color 200ms linear, transform 200ms linear;
}

/**
  Segment variables
  - i         index (1-3)
  - size      length of the segment (0 - 100)
  - growth    how much the segment grows during the animation
              (size + growth should not exceed 100)
  - duration  how long the segment takes to rotate 360Â° (seconds)
*/
@mixin generateSegment($i, $size, $growth, $duration) {
  $circumference: $loader-circumference / $loader-scale * 100%;
  $length: ($size / 100) * $circumference;
  $end: $length + ($growth / 100) * $circumference;
  .loader__svg--#{$i} {
    stroke-dasharray: $length $circumference - $end;
    animation-duration: $duration;
  }
  @keyframes loader-offset-#{$i} {
    0% {
      stroke-dasharray: $length $circumference - $length;
      stroke-dashoffset: 0;
    }
    50% {
      stroke-dasharray: $end $circumference - $end;
      stroke-dashoffset: -$circumference / 2 - ($length - $end) / 2;
    }
    100% {
      stroke-dasharray: $length $circumference - $length;
      stroke-dashoffset: -$circumference;
    }
  }
}

@include generateSegment(1, 10, 40, 0.72s);
@include generateSegment(2, 20, 30, 0.96s);
@include generateSegment(3, 05, 45, 1.16s);

@keyframes loader-color-shift {
  0% {
    stroke: var(--calcite-ui-brand);
  }
  33% {
    stroke: var(--calcite-ui-brand-press);
  }
  66% {
    stroke: var(--calcite-ui-brand-hover);
  }
  100% {
    stroke: var(--calcite-ui-brand);
  }
}

@keyframes loader-clockwise {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
