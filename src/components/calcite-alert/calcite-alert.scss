:host {
  display: flex;
  position: relative;
  justify-content: center;
  pointer-events: none;
  z-index: 102;
  margin: 0 auto;
  width: 50em;
  max-width: 90%;
  max-height: 0;
  background-color: $blk-000;
  box-shadow: 0 0 16px 0 rgba($blk-240, 0.15);
  border-radius: 2px;
  opacity: 0;
  transform: translate3d(0, $baseline, 0);
  transition: 300ms $easing-function, opacity 300ms $easing-function,
    all 0.15s ease-in-out;
  border-block-start: 0px solid transparent;
  @media only screen and (max-width: $viewport-medium) {
    width: 100%;
    max-width: 100%;
    border-radius: 2px 2px 0 0;
    box-shadow: 0 -8px 16px 0 rgba($blk-240, 0.15);
  }

  &:host(.hydrated) {
    visibility: hidden !important;
  }

  &:host([active]) {
    opacity: 1;
    max-height: 100%;
    transform: translate3d(0, -$baseline, 0);
    pointer-events: initial;
    border-block-start-width: 3px;

    &:host(.hydrated) {
      visibility: visible !important;
    }

    @media only screen and (max-width: $viewport-medium) {
      transform: translate3d(0, 0, 0);
    }
  }
}

:host slot[name="alert-title"]::slotted(div) {
  @include font-size(0);
  font-weight: 500;
}

:host slot[name="alert-link"]::slotted(a) {
  @include font-size(-1);
  color: $h-bb-060;
  margin-left: $baseline/2;
}

:host slot[name="alert-message"]::slotted(div) {
  @include font-size(-1);
  color: $blk-160;
  display: inline;
}

@mixin alert-element-base() {
  padding: $baseline/2 $baseline;
  flex: 0 0 auto;
  transition: all 0.15s ease-in-out;

  & svg {
    height: 16px;
    width: 16px;
    vertical-align: top;
  }

  @media only screen and (max-width: $viewport-medium) {
    padding: $baseline;
  }
}

.alert-content {
  @include alert-element-base;
  flex: 1 1 auto;
  min-width: 0;
  word-wrap: break-word;
  padding-block-start: $baseline/2;
  padding-block-end: $baseline/2;
  padding-inline-end: $baseline/2;
  padding-inline-start: 0;

  &:first-of-type {
    padding-inline-start: $baseline;
  }

  @media only screen and (max-width: $viewport-medium) {
    padding-block-start: $baseline;
    padding-block-end: $baseline;
    padding-inline-end: $baseline/2;
    padding-inline-start: 0;
  }
}

.alert-icon {
  @include alert-element-base;
  display: flex;
  align-items: center;
}

.alert-close {
  @include alert-element-base;
  background-color: transparent;
  -webkit-appearance: none;
  border: none;
  outline: none;
  cursor: pointer;
  border-radius: 0 0 2px 0;

  & svg {
    fill: $blk-220;
  }

  &:hover,
  &:focus {
    background-color: $blk-010;
  }

  &:active {
    background-color: $blk-020;
  }

  &:last-child {
    border-radius: 0 0 2px 0;
  }

  @media only screen and (max-width: $viewport-medium) {
    border-radius: 0;
  }
}

.alert-count {
  @include font-size(-2);
  display: flex;
  align-items: center;
  justify-content: space-evenly;
  overflow: hidden;
  width: 0;
  visibility: hidden;
  font-weight: 500;
  text-align: center;
  color: $blk-180;
  opacity: 0;
  border-inline-start: 0px solid transparent;
  border-inline-end: 0px solid transparent;
  cursor: default;
  transition: all 0.15s ease-in-out;

  &.active {
    visibility: visible;
    opacity: 1;
    padding: 0 $baseline/4;
    width: $baseline * 2;
    border-inline-start: 1px solid $blk-010;
    border-inline-end: 1px solid $blk-010;

    &:last-child {
      border-inline-end: 0px solid transparent;
    }
  }

  @media only screen and (max-width: $viewport-medium) {
    border-radius: 0;
  }
}

.alert-dismiss {
  display: block;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  width: 100%;
  height: 3px;
  z-index: 103;

  &:after {
    height: 3px;
    top: -3px;
    right: 0;
    display: block;
    position: absolute;
    border-radius: 2px 2px 0 0;
    content: "";
    background-color: rgba($blk-000, 0.6);
    z-index: 104;
  }
}

:host([theme="dark"]) {
  background-color: $blk-200;

  & slot[name="alert-title"]::slotted(div) {
    color: $blk-005;
  }

  & slot[name="alert-message"]::slotted(div) {
    color: $blk-010;
  }

  & .alert-close {
    & svg {
      fill: $blk-040;
    }

    &:hover,
    &:focus {
      background-color: $blk-210;
    }

    &:active {
      background-color: $blk-220;
    }
  }

  & .alert-count {
    color: $blk-040;

    &.active {
      border-left: 1px solid $blk-210;
      border-right: 1px solid $blk-210;
    }
  }

  & .alert-dismiss:after {
    background-color: rgba($blk-200, 0.6);
  }
}

// this should eventually be handled by a top-level config component
:host([dir="rtl"]) {
  & .alert-close:last-child {
    border-radius: 0 0 0 2px;
  }

  & slot[name="alert-link"]::slotted(a) {
    margin-left: unset;
    margin-right: $baseline/2;
  }
}

$alertColors: "blue" $h-bb-060 $v-bb-160, "red" $h-rr-060 $v-rr-160,
  "yellow" $h-yy-060 $v-yy-160, "green" $h-gg-060 $v-gg-160;

@each $alertColor in $alertColors {
  $name: nth($alertColor, 1);
  $lightThemeColor: nth($alertColor, 2);
  $darkThemeColor: nth($alertColor, 3);

  :host([theme="light"][color="#{$name}"]) {
    border-block-start-color: $lightThemeColor;

    & .alert-icon svg {
      fill: $lightThemeColor;
    }
  }

  :host([theme="dark"][color="#{$name}"]) {
    border-block-start-color: $darkThemeColor;
    & .alert-icon svg {
      fill: $darkThemeColor;
    }
  }
}

$alertDurations: "fast" 6000ms, "medium" 10000ms, "slow" 14000ms;

@each $alertDuration in $alertDurations {
  $name: nth($alertDuration, 1);
  $duration: nth($alertDuration, 2);

  :host([duration="#{$name}"]) .alert-dismiss:after {
    animation: dismissProgress $duration ease-out;
  }
}

// should be handled by auto prefixer
@keyframes dismissProgress {
  0% {
    width: 0;
    opacity: 0;
  }
  100% {
    width: 100%;
    opacity: 1;
  }
}
