:host {
  display: inline-block;
  width: auto;
  vertical-align: middle;
}

// fab variants
:host([round]) {
  border-radius: 50px;
  & a,
  & button {
    border-radius: 50px;
  }
}

// focus styles
:host button,
:host a {
  @include focus-style-base();
  &:focus {
    @include focus-style-outset();
  }
}
// button base
:host button,
:host a {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: $baseline/4 1rem;
  text-decoration: none;
  width: 100%;
  height: 100%;
  border-radius: 0;
  border: none;
  user-select: none;
  font-family: inherit;
  -webkit-appearance: none;
  cursor: pointer;
  text-align: center;
  box-sizing: border-box;
  // include transition from focus
  transition: background-color 0.15s ease-in-out, border 0.15s ease-in-out, box-shadow 0.15s ease-in-out,
    outline-offset 100ms ease-in-out, outline-color 100ms ease-in-out;
  &:hover {
    text-decoration: none;
  }
}

.content {
  display: flex;
  flex-basis: auto;
  margin-left: $baseline/3;
  margin-right: $baseline/3;
}

:host(:not([icon-start])) {
  .content {
    margin-left: unset;
  }
}
:host(:not([icon-end])) {
  .content {
    margin-right: unset;
  }
}
:host([icon-start]:not([icon-end])) {
  .calcite--rtl .content {
    margin-left: unset;
    margin-right: $baseline/3;
  }
}
:host([icon-end]:not([icon-start])) {
  .calcite--rtl .content {
    margin-right: unset;
    margin-left: $baseline/3;
  }
}

// button scale
@mixin btn-scale($font-size, $line-height, $padding-y, $padding-x) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  line-height: $line-height;
}

@mixin btn-scale-notext($font-size, $size) {
  height: $size;
  width: $size;
  font-size: $font-size;
}

@mixin btn-scale-notext-two-icons($font-size, $size) {
  height: $size;
  width: $size * 1.5;
  font-size: $font-size;
}

// button width
:host([width="auto"]) {
  width: auto;
}

:host([width="half"]) {
  width: 50%;
}

:host([width="full"]) {
  width: 100%;
}

// alignment
:host([alignment="center"]:not([width="auto"])) {
  a,
  button {
    justify-content: center;
  }
}
:host([alignment="start"]:not([width="auto"])) {
  a,
  button {
    justify-content: flex-start;
  }
}
:host([alignment="end"]:not([width="auto"])) {
  a,
  button {
    justify-content: flex-end;
  }
}
:host([alignment*="space-between"]:not([width="auto"])) {
  a,
  button {
    justify-content: space-between;
  }
}
:host([alignment="icon-start-space-between"]:not([width="auto"])) {
  .icon--start {
    margin-right: auto;
  }
  a,
  button {
    text-align: unset;
  }
}
:host([alignment="icon-end-space-between"]:not([width="auto"])) {
  .icon--end {
    margin-left: auto;
  }
  a,
  button {
    text-align: unset;
  }
}
:host([alignment="icon-start-space-between"]:not([width="auto"])) {
  .calcite--rtl .icon--start {
    margin-right: unset;
    margin-left: auto;
  }
}
:host([alignment="icon-end-space-between"]:not([width="auto"])) {
  .calcite--rtl .icon--end {
    margin-left: unset;
    margin-right: auto;
  }
}

// only two icons
:host([alignment="center"]) {
  a:not(.content--slotted),
  button:not(.content--slotted) {
    .icon--start + .icon--end {
      margin-left: $baseline/3;
    }
  }
}

:host([alignment="center"]) {
  .calcite--rtl {
    a:not(.content--slotted),
    button:not(.content--slotted) {
      .icon--start + .icon--end {
        margin-left: unset;
        margin-right: $baseline/3;
      }
    }
  }
}

.icon {
  display: inline-flex;
  position: relative;
  margin: 0;
  line-height: inherit;
  transition: $transition;
}

// disabled styles
:host([loading]),
:host([disabled]) {
  pointer-events: none;
  button,
  a {
    pointer-events: none;
    opacity: var(--calcite-ui-opacity-disabled);
  }
}

.calcite-button--loader {
  margin-inline-end: $baseline/3;
  display: flex;
  calcite-loader {
    margin: 0;
  }
}

:host([loading]) {
  button,
  a {
    .calcite-button--icon {
      opacity: 0;
    }
  }
}

// button styles
// solid
@mixin btn-solid($bg-color, $bg-color-hover, $bg-color-press, $color) {
  color: $color;
  background-color: $bg-color;
  border: 1px solid transparent;
  &:hover,
  &:focus {
    background-color: $bg-color-hover;
  }
  &:active {
    background-color: $bg-color;
  }
  & .calcite-button--icon {
    fill: $color;
  }
  & calcite-loader {
    color: $color;
  }
}

:host([appearance="solid"][color="blue"]) {
  button,
  a {
    @include btn-solid(
      var(--calcite-ui-brand),
      var(--calcite-ui-brand-hover),
      var(--calcite-ui-brand-press),
      var(--calcite-ui-foreground-1)
    );
  }
}
:host([appearance="solid"][color="red"]) {
  button,
  a {
    @include btn-solid(
      var(--calcite-ui-danger),
      var(--calcite-ui-danger-hover),
      var(--calcite-ui-danger-press),
      var(--calcite-ui-foreground-1)
    );
  }
}
:host([appearance="solid"][color="neutral"]) {
  button,
  a {
    @include btn-solid(
      var(--calcite-ui-foreground-3),
      var(--calcite-ui-foreground-2),
      var(--calcite-ui-border-2),
      var(--calcite-ui-text-1)
    );
  }
}
:host([appearance="solid"][color="inverse"]) {
  button,
  a {
    @include btn-solid(
      var(--calcite-ui-inverse),
      var(--calcite-ui-inverse-hover),
      var(--calcite-ui-inverse-press),
      $blk-000
    );
  }
}

// outline and clear
@mixin btn-outline-clear($bg-color, $border-color, $border-color-hover, $border-color-press, $color, $color-press) {
  color: $color;
  background-color: $bg-color;
  border: 1px solid $border-color;
  box-shadow: inset 0 0 0 1px transparent;
  &:hover {
    border-color: $border-color;
    box-shadow: inset 0 0 0 1px $border-color;
  }
  &:active,
  &:focus {
    color: $color-press;
    border-color: $border-color-press;
    box-shadow: inset 0 0 0 2px $border-color-press;
    & .calcite-button--icon {
      fill: $color-press;
    }
  }
  & .calcite-button--icon {
    fill: $color;
  }
  & calcite-loader {
    color: $color;
  }
}

:host([appearance="outline"][color="blue"]) {
  button,
  a {
    @include btn-outline-clear(
      var(--calcite-ui-foreground-1),
      var(--calcite-ui-brand),
      var(--calcite-ui-brand-hover),
      var(--calcite-ui-brand-press),
      var(--calcite-ui-brand),
      var(--calcite-ui-brand-press)
    );
  }
}
:host([appearance="outline"][color="red"]) {
  button,
  a {
    @include btn-outline-clear(
      var(--calcite-ui-foreground-1),
      var(--calcite-ui-danger),
      var(--calcite-ui-danger-hover),
      var(--calcite-ui-danger-press),
      var(--calcite-ui-danger),
      var(--calcite-ui-danger-press)
    );
  }
}
:host([appearance="outline"][color="neutral"]) {
  button,
  a {
    @include btn-outline-clear(
      var(--calcite-ui-foreground-1),
      var(--calcite-ui-foreground-3),
      var(--calcite-ui-foreground-2),
      var(--calcite-ui-border-2),
      var(--calcite-ui-text-1),
      var(--calcite-ui-text-1)
    );
  }
}
:host([appearance="outline"][color="inverse"]) {
  button,
  a {
    @include btn-outline-clear(
      var(--calcite-ui-foreground-1),
      var(--calcite-ui-inverse),
      var(--calcite-ui-inverse-press),
      var(--calcite-ui-inverse-hover),
      var(--calcite-ui-text-1),
      var(--calcite-ui-text-1)
    );
  }
}
:host([appearance="clear"][color="blue"]) {
  button,
  a {
    @include btn-outline-clear(
      transparent,
      var(--calcite-ui-brand),
      var(--calcite-ui-brand-hover),
      var(--calcite-ui-brand-press),
      var(--calcite-ui-brand),
      var(--calcite-ui-brand-press)
    );
  }
}
:host([appearance="clear"][color="red"]) {
  button,
  a {
    @include btn-outline-clear(
      transparent,
      var(--calcite-ui-danger),
      var(--calcite-ui-danger-hover),
      var(--calcite-ui-danger-press),
      var(--calcite-ui-danger),
      var(--calcite-ui-danger-press)
    );
  }
}
:host([appearance="clear"][color="neutral"]) {
  button,
  a {
    @include btn-outline-clear(
      transparent,
      var(--calcite-ui-foreground-3),
      var(--calcite-ui-foreground-2),
      var(--calcite-ui-border-2),
      var(--calcite-ui-text-1),
      var(--calcite-ui-text-1)
    );
  }
}
:host([appearance="clear"][color="inverse"]) {
  button,
  a {
    @include btn-outline-clear(
      transparent,
      var(--calcite-ui-inverse),
      var(--calcite-ui-inverse-press),
      var(--calcite-ui-inverse-hover),
      var(--calcite-ui-text-1),
      var(--calcite-ui-text-1)
    );
  }
}

:host([appearance="outline"][split-child="primary"]) button,
:host([appearance="clear"][split-child="primary"]) button {
  border-right: 0;
}

:host([appearance="outline"][split-child="secondary"]) button,
:host([appearance="clear"][split-child="secondary"]) button {
  .calcite--rtl {
    border-right: 0;
  }
}

:host([appearance="outline"][split-child="secondary"]) button,
:host([appearance="clear"][split-child="secondary"]) button {
  border-left: 0;
}

:host([appearance="outline"][split-child="primary"]) button,
:host([appearance="clear"][split-child="primary"]) button {
  .calcite--rtl {
    border-left: 0;
  }
}

// transparent
@mixin btn-transparent($color) {
  color: $color;
  background-color: transparent;
  &:hover,
  &:focus {
    background-color: var(--calcite-button-transparent-hover);
  }
  &:active {
    background-color: var(--calcite-button-transparent-press);
  }
  & calcite-loader {
    color: $color;
  }
}

:host([appearance="transparent"][color="blue"]) {
  button,
  a {
    @include btn-transparent(var(--calcite-ui-text-link));
  }
}

:host([appearance="transparent"][color="red"]) {
  button,
  a {
    @include btn-transparent(var(--calcite-ui-danger-press));
  }
}
:host([appearance="transparent"][color="neutral"]) {
  button,
  a {
    @include btn-transparent(var(--calcite-ui-text-1));
  }
}
:host([appearance="transparent"][color="inverse"]) {
  button,
  a {
    @include btn-transparent(var(--calcite-ui-foreground-1));
  }
}

// generate button scales
$btnScales: "s" 12px 1.33 7px 12px, "m" 14px 1.15 13px 20px, "l" 18px 1.2 15px 24px;
@each $btnScale in $btnScales {
  $name: nth($btnScale, 1);
  $font-size: nth($btnScale, 2);
  $line-height: nth($btnScale, 3);
  $padding-y: nth($btnScale, 4);
  $padding-x: nth($btnScale, 5);

  :host([scale="#{$name}"]:not([appearance="transparent"])) button.content--slotted,
  :host([scale="#{$name}"]:not([appearance="transparent"])) a.content--slotted {
    @include btn-scale($font-size, $line-height, $padding-y, $padding-x);
  }
  // accomodate for transparent buttons not having borders
  :host([scale="#{$name}"][appearance="transparent"]) button.content--slotted,
  :host([scale="#{$name}"][appearance="transparent"]) a.content--slotted {
    $compensated-padding-y: $padding-y + 1px;
    @include btn-scale($font-size, $line-height, $compensated-padding-y, $padding-x);
  }
}

// generate fab scales
$btnScales2: "s" 12px 32px, "m" 14px 44px, "l" 18px 56px;

@each $btnScale in $btnScales2 {
  $name: nth($btnScale, 1);
  $font-size: nth($btnScale, 2);
  $size: nth($btnScale, 3);

  :host([scale="#{$name}"]) button:not(.content--slotted),
  :host([scale="#{$name}"]) a:not(.content--slotted) {
    @include btn-scale-notext($font-size, $size);
  }
}

// generate fab scales
$btnScales3: "s" 12px 32px, "m" 14px 44px, "l" 18px 56px;

@each $btnScale in $btnScales3 {
  $name: nth($btnScale, 1);
  $font-size: nth($btnScale, 2);
  $size: nth($btnScale, 3);

  :host([scale="#{$name}"][icon-start][icon-end]) button:not(.content--slotted),
  :host([scale="#{$name}"][icon-start][icon-end]) a:not(.content--slotted) {
    @include btn-scale-notext-two-icons($font-size, $size);
  }
}
